<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Guess the Object Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .game-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 600px;
            width: 100%;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .header h1 {
            color: #333;
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .progress-bar {
            background: #e0e0e0;
            height: 8px;
            border-radius: 4px;
            margin: 20px 0;
            overflow: hidden;
        }
        
        .progress-fill {
            background: linear-gradient(45deg, #667eea, #764ba2);
            height: 100%;
            transition: width 0.3s ease;
            border-radius: 4px;
        }
        
        .stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            font-weight: bold;
            color: #555;
        }
        
        .current-question {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            border-left: 4px solid #667eea;
        }
        
        .current-question h3 {
            color: #333;
            margin-bottom: 10px;
        }
        
        .answer-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-bottom: 20px;
        }
        
        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .btn-yes {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
        }
        
        .btn-no {
            background: linear-gradient(45deg, #f44336, #da190b);
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .question-history {
            max-height: 200px;
            overflow-y: auto;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .question-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        
        .question-item:last-child {
            border-bottom: none;
        }
        
        .answer-badge {
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .answer-yes {
            background: #4CAF50;
            color: white;
        }
        
        .answer-no {
            background: #f44336;
            color: white;
        }
        
        .guess-section {
            text-align: center;
            margin-top: 20px;
        }
        
        .guess-input {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 10px;
            width: 200px;
            margin-right: 10px;
            font-size: 16px;
        }
        
        .btn-guess {
            background: linear-gradient(45deg, #FF6B6B, #FF8E53);
            color: white;
        }
        
        .thinking-animation {
            display: none;
            text-align: center;
            margin: 20px 0;
            color: #667eea;
            font-style: italic;
        }
        
        .thinking-dots::after {
            content: '';
            animation: dots 2s infinite;
        }
        
        @keyframes dots {
            0% { content: ''; }
            25% { content: '.'; }
            50% { content: '..'; }
            75% { content: '...'; }
            100% { content: ''; }
        }
        
        .game-over {
            display: none;
            text-align: center;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-top: 20px;
        }
        
        .reset-btn {
            background: white;
            color: #667eea;
            margin-top: 15px;
        }
        
        .token-section {
            display: block;
            text-align: center;
            margin-bottom: 20px;
        }
        
        .token-input {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 10px;
            width: 300px;
            font-size: 16px;
            margin-right: 10px;
        }
        
        .btn-token {
            background: linear-gradient(45deg, #2196F3, #21CBF3);
            color: white;
        }
        
        .api-error {
            display: none;
            text-align: center;
            color: #f44336;
            font-size: 14px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">
            <h1>ðŸ”® Guess the Object</h1>
            <p>Think of an object and I'll try to guess it with AI!</p>
        </div>
        
        <div class="token-section" id="tokenSection">
            <h4>Enter your Hugging Face API Token (optional)</h4>
            <p>Without a token, API requests are limited. Get one at <a href="https://huggingface.co/settings/tokens" target="_blank">Hugging Face</a>.</p>
            <input type="text" class="token-input" id="apiTokenInput" placeholder="Enter API token..." aria-label="Enter Hugging Face API token">
            <button class="btn btn-token" onclick="startGameWithToken()" aria-label="Start Game">Start Game</button>
        </div>
        
        <div id="gameContent" style="display: none;">
            <div class="api-error" id="apiError">API unavailable, using fallback questions.</div>
            
            <div class="stats">
                <span>Question: <span id="questionCount">1</span>/20</span>
                <span>Accuracy: <span id="accuracy">100%</span></span>
            </div>
            
            <div class="progress-bar" role="progressbar" aria-valuenow="5" aria-valuemin="0" aria-valuemax="100">
                <div class="progress-fill" id="progressFill" style="width: 5%"></div>
            </div>
            
            <div class="current-question">
                <h3>Current Question:</h3>
                <p id="currentQuestion">Is it something you would typically find inside a house?</p>
            </div>
            
            <div class="answer-buttons">
                <button class="btn btn-yes" onclick="answerQuestion(true)" aria-label="Answer Yes" onkeydown="if(event.key === 'Enter') answerQuestion(true)">Yes</button>
                <button class="btn btn-no" onclick="answerQuestion(false)" aria-label="Answer No" onkeydown="if(event.key === 'Enter') answerQuestion(false)">No</button>
            </div>
            
            <div class="thinking-animation" id="thinkingAnimation">
                <p>ðŸ¤” Thinking with AI<span class="thinking-dots"></span></p>
            </div>
            
            <div class="question-history">
                <h4>Question History:</h4>
                <div id="historyList" aria-live="polite">
                    <!-- Questions will be added here -->
                </div>
            </div>
            
            <div class="guess-section">
                <h4>Think you know what I'm guessing?</h4>
                <input type="text" class="guess-input" id="guessInput" placeholder="Enter your guess..." aria-label="Enter your guess">
                <button class="btn btn-guess" onclick="makeGuess()" aria-label="Submit Guess">Guess!</button>
            </div>
            
            <div class="game-over" id="gameOver">
                <h2>ðŸŽ‰ Game Over!</h2>
                <p id="gameResult"></p>
                <button class="btn reset-btn" onclick="resetGame()" aria-label="Play Again">Play Again</button>
            </div>
        </div>
    </div>

    <script>
        let gameData = {
            answers: [],
            currentQuestionIndex: 0,
            gameActive: true,
            context: "The user is thinking of a physical object. ",
            possibleObjects: [],
            apiToken: '',
            fallbackQuestions: [
                "Is it something you would typically find inside a house?",
                "Is it something that's alive (like an animal or plant)?",
                "Is it something larger than a person?",
                "Does it have wheels?",
                "Does it use electricity or fuel to operate?"
            ],
            usingFallback: false
        };

        function startGameWithToken() {
            gameData.apiToken = document.getElementById('apiTokenInput').value.trim();
            document.getElementById('tokenSection').style.display = 'none';
            document.getElementById('gameContent').style.display = 'block';
            updateDisplay();
        }

        async function callHuggingFaceAPI(prompt) {
            try {
                const headers = {
                    'Content-Type': 'application/json'
                };
                if (gameData.apiToken) {
                    headers['Authorization'] = `Bearer ${gameData.apiToken}`;
                }
                const response = await fetch('https://api-inference.huggingface.co/models/deepset/roberta-base-squad2', {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify({
                        inputs: {
                            question: prompt,
                            context: gameData.context
                        }
                    })
                });
                if (!response.ok) {
                    throw new Error(`API error: ${response.status}`);
                }
                return await response.json();
            } catch (error) {
                console.error('API call failed:', error);
                gameData.usingFallback = true;
                document.getElementById('apiError').style.display = 'block';
                return null;
            }
        }

        async function getNextQuestion() {
            // Truncate context to last 5 answers to avoid token limit
            if (gameData.answers.length > 5) {
                gameData.context = "The user is thinking of a physical object. " +
                    gameData.answers.slice(-5).map(a => `Question: ${a.question} Answer: ${a.answer ? 'Yes' : 'No'}. `).join('');
            }
            
            const prompt = `Based on the context: "${gameData.context}", generate a concise yes-or-no question to help identify a physical object the user is thinking of. Ensure the question can be answered with "Yes" or "No".`;
            const result = await callHuggingFaceAPI(prompt);
            if (result && result.answer) {
                // Ensure question ends with '?' and is yes-or-no
                let question = result.answer.trim();
                if (!question.endsWith('?')) {
                    question += '?';
                }
                return question;
            }
            // Fallback to static question
            gameData.usingFallback = true;
            document.getElementById('apiError').style.display = 'block';
            return gameData.fallbackQuestions[gameData.currentQuestionIndex % gameData.fallbackQuestions.length];
        }

        async function predictObject() {
            const prompt = `Based on the context: "${gameData.context}", predict the most likely physical object the user is thinking of.`;
            const result = await callHuggingFaceAPI(prompt);
            if (result && result.answer) {
                gameData.possibleObjects = [result.answer];
                return result.answer;
            }
            return "unknown object";
        }

        function updateDisplay() {
            document.getElementById('questionCount').textContent = gameData.currentQuestionIndex + 1;
            document.getElementById('currentQuestion').textContent = gameData.answers[gameData.currentQuestionIndex]?.question || gameData.fallbackQuestions[0];
            
            const progress = ((gameData.currentQuestionIndex + 1) / 20) * 100;
            document.getElementById('progressFill').style.width = progress + '%';
            document.getElementById('progressFill').setAttribute('aria-valuenow', progress);
            
            // Heuristic accuracy: increases as more questions narrow possibilities
            const accuracy = Math.min(100, Math.round((gameData.currentQuestionIndex / 20) * 100));
            document.getElementById('accuracy').textContent = accuracy + '%';
        }

        async function answerQuestion(answer) {
            if (!gameData.gameActive) return;
            
            const currentQuestion = document.getElementById('currentQuestion').textContent;
            gameData.answers.push({
                question: currentQuestion,
                answer: answer
            });
            
            addToHistory(currentQuestion, answer);
            
            // Update context with the latest answer
            gameData.context += `Question: ${currentQuestion} Answer: ${answer ? 'Yes' : 'No'}. `;
            
            // Show thinking animation
            document.getElementById('thinkingAnimation').style.display = 'block';
            
            setTimeout(async () => {
                document.getElementById('thinkingAnimation').style.display = 'none';
                
                gameData.currentQuestionIndex++;
                
                if (gameData.currentQuestionIndex >= 20 || gameData.usingFallback && gameData.currentQuestionIndex >= gameData.fallbackQuestions.length) {
                    endGame();
                } else {
                    // Get next question from API
                    const nextQuestion = await getNextQuestion();
                    document.getElementById('currentQuestion').textContent = nextQuestion;
                    gameData.answers[gameData.currentQuestionIndex] = { question: nextQuestion };
                    updateDisplay();
                }
            }, 1500);
        }

        function addToHistory(question, answer) {
            const historyList = document.getElementById('historyList');
            const questionItem = document.createElement('div');
            questionItem.className = 'question-item';
            
            questionItem.innerHTML = `
                <span>${question}</span>
                <span class="answer-badge ${answer ? 'answer-yes' : 'answer-no'}">
                    ${answer ? 'YES' : 'NO'}
                </span>
            `;
            
            historyList.appendChild(questionItem);
            historyList.scrollTop = historyList.scrollHeight;
        }

        async function makeGuess() {
            const guess = document.getElementById('guessInput').value.trim().toLowerCase();
            if (!guess) {
                alert('Please enter a guess!');
                return;
            }
            
            const predictedObject = await predictObject();
            const isCorrect = guess === predictedObject.toLowerCase();
            if (isCorrect) {
                alert(`Great guess! "${guess}" matches my prediction! Let's play again!`);
                endGame();
            } else {
                alert(`Hmm, "${guess}" doesn't match my prediction (${predictedObject}). Try again or keep answering questions!`);
            }
        }

        async function endGame() {
            gameData.gameActive = false;
            document.getElementById('gameOver').style.display = 'block';
            
            const predictedObject = await predictObject();
            let resultText = `I've asked all my questions or narrowed it down! I think your object is a ${predictedObject}. Was I correct?`;
            
            resultText += "<br><br>Your answers:<ul>" + 
                gameData.answers.map(a => `<li>${a.question}: ${a.answer ? 'Yes' : 'No'}</li>`).join('') +
                "</ul>";
                
            document.getElementById('gameResult').innerHTML = resultText;
        }

        function resetGame() {
            gameData.currentQuestionIndex = 0;
            gameData.answers = [];
            gameData.context = "The user is thinking of a physical object. ";
            gameData.possibleObjects = [];
            gameData.gameActive = true;
            gameData.usingFallback = false;
            
            document.getElementById('historyList').innerHTML = '';
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('guessInput').value = '';
            document.getElementById('apiError').style.display = 'none';
            document.getElementById('currentQuestion').textContent = gameData.fallbackQuestions[0];
            
            document.getElementById('gameContent').style.display = 'none';
            document.getElementById('tokenSection').style.display = 'block';
        }

        // Initialize the game
        // Token input is shown first, so no initial updateDisplay()
    </script>
</body>
</html>
